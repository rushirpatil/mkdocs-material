{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/","title":"Data Warehouse User Guide","text":""},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#introduction","title":"Introduction","text":""},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#purpose-of-this-guide","title":"Purpose of this Guide","text":"<p>Welcome to the Data Warehouse User Guide! This document aims to provide users with an understanding of the data warehouse, its architecture, and how to derive meaningful insights through querying. You will learn about various scenarios, metrics, and how to write queries to extract valuable information from the data model.</p>"},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#intended-audience","title":"Intended Audience","text":"<p>This guide is intended for analysts, business users, and data professionals who interact with the data warehouse. Familiarity with SQL and data concepts is helpful but not mandatory.</p>"},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#query-levels","title":"Query Levels","text":""},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#foundation-level","title":"Foundation Level:","text":"<p>At this foundational level, users learn to craft queries targeting individual tables and manipulate data by applying filters to specific fields.</p>"},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#intermediate-level","title":"Intermediate Level:","text":"<p>Building upon the basics, this intermediate level equips users with the skills to compose queries that involve joining multiple tables. Users learn to integrate disparate data sources, enhancing query sophistication.</p>"},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#advanced-level","title":"Advanced Level:","text":"<p>At the advanced stage, users delve into complex query construction, mastering intricate data retrieval scenarios through sophisticated table joins and nuanced filtering techniques.</p>"},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#understanding-data-model","title":"Understanding Data Model","text":"<p>A data model is a visual and structural representation of how data is organized in a database. It defines the relationships between different data elements. A well-designed data model ensures data accuracy, consistency, and efficient retrieval. It\u00a0forms the foundation for accurate reporting and meaningful insights.</p> <p>Data warehouse data model consists of following subject areas:</p> <ul> <li> <p>Division 1</p> </li> <li> <p>Division 2</p> </li> <li> <p>Division 3</p> </li> <li> <p>Division 4</p> </li> </ul>"},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#querying-data-for-metrics","title":"Querying data for Metrics","text":""},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#tools-for-querying","title":"Tools for Querying","text":"<p>Use below SQL-based tool to query data:</p> <ul> <li> <p>SQL workbench</p> </li> <li> <p>AWS console - Redshift Query Editor</p> </li> </ul>"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%201/","title":"Division 1","text":""},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%201/#introduction","title":"Introduction","text":"<p>members_data refers to the segment of a program dedicated to understanding and engaging with members_data who actively participate in the program. It focuses on analyzing member behavior, preferences, and interactions to tailor personalized experiences that enhance loyalty. By analyzing member data and preferences, the program can deliver personalized offers such as discounts, promotions, or bonus points on products or services that align with individual interests and purchase history.</p>"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%201/#comprehensive-insights-of-members_data","title":"Comprehensive Insights of members_data","text":""},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%201/#employee_ids","title":"employee_ids","text":"<p>A emp_id is a unique identifier associated with a member and it is used to identify a member during a transaction. A member could have multiple emp_ids associated with him/her. A emp_id could be a members_datahip card number, phone number, email, Facebook ID, twitter handler, etc.</p> <p>LIST OF TABLES: The table employee_ids is employed to retrieve the relevant fields</p> <ul> <li>employee_ids</li> </ul> <p>Loyalty information can be retrieved from the database in a few different ways, as listed below.</p> <ul> <li>How to retrieve member loyalty information based on emp_id ?</li> </ul> <pre><code>SELECT emp_id,\ncust_id,\nemp_id_name,\nstatus,\nis_primary\nFROM schema_name.employee_ids\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from employee_ids\nAND emp_id = '6898566527c0484f1ff1c' -- To filter based on emp_id\n;\n</code></pre> <p>Sample Data:</p> emp_id cust_id emp_id_name status is_primary 6898566527c0484f1ff1c 94568566ba0744e7d65603 CardID Active false <ul> <li>How to retrieve emp_ids associated with a member based on     cust_id value?</li> </ul> <pre><code>SELECT cust_id,\nemp_id,\nemp_id_name,\nstatus,\nis_primary\nFROM schema_name.employee_ids\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from employee_ids\nAND cust_id = '94568566ba0744e7d65603' -- To filter based on cust_id\n;\n</code></pre> <p>Sample Data:</p> cust_id emp_id emp_id_name status is_primary 94568566ba0744e7d65603 hpp1758799 CardID Lost_Stolen false 94568566ba0744e7d65603 kft3720300098 CardID Active true 94568566ba0744e7d65603 815htr46904 AlternateID Active true <ul> <li>How to retrieve total number of cards for each emp_id_name?</li> </ul> <pre><code>SELECT emp_id_name,\nCOUNT(*) AS total_cards\nFROM schema_name.employee_ids\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from employee_ids\nGROUP BY 1;\n</code></pre> <p>Sample Data:</p> emp_id_name total_cards AlternateID 5,651 CardID 33,879 <ul> <li>How to retrieve total number of cards for each card_status?</li> </ul> <pre><code>SELECT status AS card_status,\nCOUNT(*) AS total_cards\nFROM schema_name.employee_ids\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from emp_ids\nGROUP BY 1;\n</code></pre> <p>Sample Data:</p> card_status total_cards Active 39,420 Locked 110"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%201/#members_data","title":"members_data","text":"<p>The existing consumers who register for the programs of client are identified as members_data of Organization.</p> <p>LIST OF TABLES: The below mentioned fields can be retrieved by performing joins across the indicated tables.</p> <ul> <li> <p>members_data</p> </li> <li> <p>employee_ids</p> </li> </ul> <p>members_data details data can be retrieved in a few different ways, as listed below.</p> <ul> <li>How to retrieve members_data based on emp_id?</li> </ul> <pre><code>SELECT members_data.id AS cust_id,\nemployee_ids.emp_id,\nmembers_data.member_status,\nmembers_data.enrollment_date\nFROM schema_name.members_data\nINNER JOIN schema_name.employee_ids\nON members_data.id = employee_ids.cust_id\nWHERE members_data.delete_flag &lt;&gt; 'Y'-- To get only non-deleted records from members_data\nAND emp_id = 'a2g30k20098' -- To filter based on emp_id\n;\n</code></pre> <p>Sample Data:</p> cust_id emp_id member_status enrollment_date 8768a9965fhf45d4051 a2g30k20098 Active 2004-12-17 05:00:00+00 <ul> <li>How to retrieve members_data info based on cust_id?</li> </ul> <pre><code>SELECT id AS cust_id,\nmember_status,\nenrollment_date\nFROM schema_name.members_data\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from members_data\nAND id = '90701a99fshj7245d4051'-- To filter based on id\n;\n</code></pre> <p>Sample Data:</p> cust_id member_status enrollment_date 9560c0df1a9sjcu7245d4051 Active 2004-12-17 05:00:00+00 <ul> <li>How to retrieve the list of members_data enrolled on a certain enrollment_date?</li> </ul> <pre><code>SELECT id AS cust_id,\nmember_status,\nenrollment_date,\nenrollment_source\nFROM schema_name.members_data\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from members_data\nAND enrollment_date ::DATE BETWEEN '2023-07-31' AND '2023-09-08' -- To filter by start and end dates of the enrollment_date\n;\n</code></pre> <p>Sample Data:</p> cust_id member_status enrollment_date enrollment_source 907698368hafca147f6c86ee PreEnrolled 2023-07-31 00:00:00+00 HPNS Lookup 457698368hafca147f6c86ee Active 2023-07-31 00:00:00+00 HPNS Lookup 6782698368hafca147f6c86e Active 2023-07-31 00:00:00+00 UCD <ul> <li>How to retrieve total number of members_data enrolled in each month based on enrollment_date in a given year ?</li> </ul> <pre><code>SELECT TO_CHAR(enrollment_date::DATE,'mon-yyyy') AS enrollment_date,\nCOUNT(*) AS total_members_data\nFROM schema_name.members_data\nWHERE DATE_PART(year,enrollment_date::DATE) BETWEEN '2022' AND '2023' -- To filter based on enrollment_date\nAND delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from members_data\nGROUP BY 1;\n</code></pre> <p>Sample Data:</p> enrollment_date total_members_data Jan-22 1,866 Jan-23 3,733 Feb-22 4,881 Feb-23 2,759 <ul> <li>How to retrieve total number of members_data enrolled via different enrollment_source?</li> </ul> <pre><code>SELECT enrollment_source,\nCOUNT(*) AS total_members_data\nFROM schema_name.members_data\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from members_data\nGROUP BY 1;\n</code></pre> <p>Sample Data:</p> enrollment_source total_members_data HPNS Conversion 23,958 HPNS Lookup 20,256 UCD 25,527 Unknown 21,402 <ul> <li>How to retrieve total number of members_data enrolled using different enrollment_channel\u2019s ?</li> </ul> <pre><code>SELECT enrollment_channel,\nCOUNT(*) AS total_members_data\nFROM schema_name.members_data\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from members_data\nGROUP BY 1;\n</code></pre> <p>Sample Data:</p> enrollment_channel total_members_data WCON 24,532 WWEB 12,978 ORET 14,222 <ul> <li>How to retrieve total number of members_data for each member_status?</li> </ul> <pre><code>SELECT member_status,\nCOUNT(*) AS total_members_data\nFROM schema_name.members_data\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from members_data\nGROUP BY 1;\n</code></pre> <p>Sample Data:</p> member_status total_members_data PreEnrolled 18,409 Terminated 113 Active 21,008 <ul> <li>How to retrieve number of members_data deleted ?</li> </ul> <pre><code>SELECT delete_flagAS delete_status,\nCOUNT(*) AS total_members_data\nFROM schema_name.members_data\nWHERE delete_flag= 'Y' -- To get only deleted records from members_data\nGROUP BY 1;\n</code></pre> <p>Sample Data:</p> delete_status total_members_data Y 1,785,679"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%201/#member_wallets","title":"member_wallets","text":"<p>wallets are virtual containers or buckets that contain the points earned by the member. A member can have multiple wallets, each wallet can contain points earned for different transactions.</p> <p>LIST OF TABLES: The table member_wallets is employed to retrieve the relevant fields</p> <ul> <li> <p>member_wallets</p> </li> <li> <p>employee_ids</p> </li> </ul> <p>wallet and their balance data can be retrieved from the database in a few different ways, as listed below.</p> <ul> <li>How to retrieve all the wallets of a member using emp_id?</li> </ul> <pre><code>SELECT employee_ids.emp_id,\nmember_wallets.wallet_policy_id,\nmember_wallets.wallet_name,\nmember_wallets.wallet_balance,\nmember_wallets.available_balance\nFROM schema_name.member_wallets\nINNER JOIN schema_name.employee_ids\nON member_wallets.cust_id = employee_ids.cust_id\nWHERE emp_id IN ('89771089785fh2') -- To filter based on emp_id\nAND member_wallets.delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_wallets\n;\n</code></pre> <p>Sample Data:</p> emp_id wallet_policy_id wallet_name wallet_balance available_balance 89771089785fh2 6jeg5c2459ca0027fa78d9 Points 2232 2232 89771089785fh2 96019d5c245rda0027fa78da Body Armor Club 0 0 89771089785fh2 6jg19d5c245rha0027fa78dd Beverage Club 4 4 <ul> <li>How to retrieve all the wallet details of a member based on cust_id?</li> </ul> <pre><code>SELECT cust_id,\nwallet_policy_id,\nwallet_name,\nwallet_balance,\navailable_balance\nFROM schema_name.member_wallets\nWHERE cust_id IN ('84576358ccaaffar501a8ab') -- To filter based on cust_id\nAND delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_wallets\n;\n</code></pre> <p>Sample Data:</p> cust_id wallet_policy_id wallet_name wallet_balance available_balance 84576358ccaaffar501a8ab 0079d5c2459cafa78d8uh Frito Lay Club 0 0 84576358ccaaffar501a8ab 00419d5c2459ca0027fa7 Points 2,232 2,232 84576358ccaaffar501a8ab 47919d5c2459ca0027fa78 Beverage Club 4 4 <ul> <li>How to retrieve the total balance available on each wallet?</li> </ul> <pre><code>SELECT wallet_name,\nwallet_policy_id,\nSUM(wallet_balance) wallet_balance,\nSUM(available_balance) available_balance\nFROM schema_name.member_wallets\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_wallets\nGROUP BY 1,\n2;\n</code></pre> <p>Sample Data:</p> wallet_name wallet_policy_id wallet_balance available_balance US Alto Club 33273 6068e13c20c6ker62ef5c5 1923 1923 US CarWash Card 6282bf77b68e8c0bh47f1ca 22537 22537 <ul> <li>How to retrieve the total accrued points on each wallet?</li> </ul> <pre><code>SELECT wallet_name,\nwallet_policy_id,\nSUM(accrued_pts) AS total_accrued_pts\nFROM schema_name.member_wallets\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_wallets\nGROUP BY 1, 2;\n</code></pre> <p>Sample Data:</p> wallet_name wallet_policy_id total_accrued_pts US Pizza Punch Card 9087913c20c6002683u 144132 CA Coke Punch 8969bd532a5c65adra6 0 <ul> <li>How to retrieve the total redeemed points on each wallet?</li> </ul> <pre><code>SELECT wallet_name,\nwallet_policy_id,\nSUM(redeemed_pts) AS total_redeemed_pts\nFROM schema_name.member_wallets\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_wallets\nGROUP BY 1,\n2;\n</code></pre> <p>Sample Data:</p> wallet_name wallet_policy_id total_redeemed_pts US Celsius 11th Free Punch 9685gf81106c7c5c0024d1 111,370 US Pizza 8th Free Punch y86h9e376a16b0027a7e8 10,594,255 <ul> <li>How to retrieve the total expired points on each wallet?</li> </ul> <pre><code>SELECT wallet_name,\nwallet_policy_id,\nSUM(expired_points) AS total_expired_points\nFROM schema_name.member_wallets\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member wallets\nGROUP BY 1, 2;\n</code></pre> <p>Sample Data:</p> wallet_name wallet_policy_id total_expired_points US Coke 11th Free Punch 693g1106c7c000026890 48,562 CA 7th Coffee Punch 628308b5d170200281e1 476,247 <ul> <li>How to retrieve the number of members_data whose wallet balance is not zero?</li> </ul> <pre><code>SELECT wallet_name,\nCOUNT(DISTINCT cust_id) AS members_data_count\nFROM schema_name.member_wallets\nWHERE available_balance  &lt;&gt; 0 -- To filter based on available balance\nAND delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_wallets\nGROUP BY 1;\n</code></pre> <p>Sample Data:</p> wallet_name members_data_count Monster Java Club 490,974 Stokers Club 27,984 Tourney Club 39,609"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%201/#member_levels","title":"member_levels","text":"<p>member_levels is an attribute associated with a member to define an order between levels by ranking them in order of achievement and categorizing/grouping them based on the achievements of the member.</p> <p>A member_level that is assigned to a member based on their engagement with the program.</p> <p>LIST OF TABLES: The below mentioned fields can be retrieved by performing joins across the indicated tables.</p> <ul> <li> <p>member_levels</p> </li> <li> <p>employee_ids</p> </li> </ul> <p>member_levels data can be retrieved from the database in a few different ways, as listed below.</p> <p>* How to retrieve the member_level details of a member using their emp_id?</p> <pre><code>SELECT employee_ids.emp_id,\nmember_levels.member_level_policy_level_id,\nmember_levels.prev_level_name,\nmember_levels.level_number,\nmember_levels.level_name,\nmember_levels.achieved_on_utc_ts,\nmember_levels.requal_on_utc_ts\nFROM schema_name.member_levels\nINNER JOIN schema_name.employee_ids\nON member_levels.cust_id = employee_ids.cust_id\nWHERE employee_ids.emp_id IN ('7te28001') -- To filter based on emp_id\nAND member_levels.delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_levels\n;\n</code></pre> <p>Sample Data:</p> emp_id member_level_policy_level_id prev_level_name level_number level_name achieved_on_utc_ts requal_on_utc_ts 7te28001 89066d7328034c0aklreb0f Sapphire 2 Pearl 2023-01-01 12:08:33+00 2025-02-01 07:59:59.999+00 <p>* How to retrieve member member_levels based on cust_id?</p> <pre><code>SELECT cust_id,\nmember_level_policy_level_id,\nprev_level_name,\nlevel_number,\nlevel_name,\nachieved_on_utc_ts,\nrequal_on_utc_ts\nFROM schema_name.member_levels\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_levels\nAND cust_id = '907c0df1a996fsg244aw1' -- To filter based on cust_id\n;\n</code></pre> <p>Sample Data:</p> cust_id member_level_policy_level_id prev_level_name level_number level_name achieved_on_utc_ts requal_on_utc_ts 907c0df1a996fsg244aw1 jkd5b245rt0027fa78d7 1 Welcome 2019-01-01 00:00:00+00 3000-01-01 00:00:00+00 <p>* How to retrieve total no of member_levels for each level_name? <pre><code>SELECT level_name,\nCOUNT(*) AS total_members_data\nFROM schema_name.member_levels\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_levels\nGROUP BY 1;\n</code></pre></p> <p>Sample Data:</p> level_name total_members_data Sapphire 59,711,897 NOIR - No EC 2,026 Gold 238,532 <p>* How to retrieve total no of member_levels achieved based on achieved_on_utc_ts?</p> <pre><code>SELECT TO_CHAR(achieved_on_utc_ts::DATE,'mon-yyyy') AS\nachieved_on_utc_ts,\nCOUNT(*) AS total_member_levels_achieved\nFROM schema_name.member_levels\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_levels\nAND DATE_PART(year,achieved_on_utc_ts :: DATE) BETWEEN '2022' AND '2023' -- To filter based on achieved_on_utc_ts\nGROUP BY 1;\n</code></pre> <p>Sample Data:</p> achieved_on_utc_ts total_member_levels_achieved Apr-2022 303,484 Apr-2023 296,561 Aug-2022 216,669 Aug-2023 275,699"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%201/#member_level_histories","title":"member_level_histories","text":"<p>The member_level_histories tracks each member's member_level changes over time. It includes the assigned member_levels, and dates of assignment. This detailed record allows for monitoring the progression and status of members_data within the program, ensuring an accurate historical account of member_level adjustments.</p> <p>LIST OF TABLES: The aforementioned fields can be retrieved by performing joins across the indicated tables.</p> <ul> <li> <p>member_level_histories</p> </li> <li> <p>employee_ids</p> </li> </ul> <p>member_level history information can be retrieved from the database in a few different ways, as listed below.</p> <p>* How to retrieve the member_levels assigned to a member based on their emp_id?</p> <pre><code>SELECT employee_ids.emp_id,\nmember_level_histories.prev_member_level_level,\nmember_level_histories.current_member_level_level,\nmember_level_histories.assign_date\nFROM schema_name.member_level_histories mt\nINNER JOIN schema_name.employee_ids mli\nON member_level_histories.cust_id = employee_ids.cust_id\nWHERE member_level_histories.delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_level_histories\nAND employee_ids.emp_id IN ('aj28001') -- To filter based on emp_id\n;\n</code></pre> <p>Sample Data: </p> emp_id prev_member_level_level current_member_level_level assign_date aj28001 Sapphire Sapphire 2016-08-23 13:09:34.593+00 aj28001 Sapphire Pearl 2023-01-01 12:08:33+00 <p>* How to retrieve the member_level change histories for a member using their cust_id?</p> <pre><code>SELECT cust_id,\nprev_member_level_level,\ncurrent_member_level_level,\nassign_date\nFROM schema_name.member_level_histories\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_level_histories\nAND cust_id IN ('79766041drh1a04cdd92a') -- To filter based on cust_id\n;\n</code></pre> <p>Sample Data:</p> cust_id prev_member_level_level current_member_level_level assign_date 79766041drh1a04cdd92a Sapphire Sapphire 2016-08-23 13:09:34.593+00 79766041drh1a04cdd92a Sapphire Pearl 2023-01-01 12:08:33+00 <p>* How to retrieve the member_levels assigned to a member based on assign_date?</p> <pre><code>SELECT assign_date,\ncust_id,\nprev_member_level_level,\ncurrent_member_level_level\nFROM schema_name.member_level_histories\nWHERE assign_date::DATE = '2022-08-01' -- To filter based on assign_date\nAND delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_level_histories\n;\n</code></pre> <p>Sample Data: </p> assign_date cust_id prev_member_level_level current_member_level_level 2022-08-01 07:00:00+00 6588847961325210fc30 Sapphire Pearl 2022-08-01 00:19:04.062+00 8962a5d9d03a422f239b Sapphire Pearl 2022-08-01 22:12:31.623+00 67843c8c45a043avhf43 Platinum Platinum - No EC"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%202/","title":"Division 2","text":""},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%202/#introduction","title":"Introduction","text":"<p>Interactions of the members with Organization is processed using activity.  </p> <p>For instance, Transactions like accrual activity, redemption activity, redeeming a reward, availing an offer or any purchases made by the members. When an activity is performed it trigger various rules and policies configured in Organization for the program to which the activity is associated with and sends a response based on that to the source of the activity trigger, which could be a POS, Online Store or Mobile App.</p> <p>Comprehensive Insights of member_trans member_trans Members interactions with Organization are managed through activity processing. For example, activities such as earning points, redeeming rewards, using offers, or making purchases are all considered. Each activity triggers various rules and policies set up within Organization for the associated program. The system then sends a response based on these rules to the source of the activity trigger, which could be a point-of-sale system, online store, or mobile app.</p>"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%202/#list-of-tables","title":"List Of Tables:","text":"<p>The member_trans is employed to retrieve the relevant fields.</p> <ul> <li> <p>member_trans </p> </li> <li> <p>emp_ids</p> </li> </ul> <p>member_trans can be retrieved from database in a few different ways, as listed below.</p>"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%203/","title":"Division 3","text":""},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%203/#introduction","title":"Introduction","text":"<p>Programs are designed to retain customers by inspiring continued purchases from your brand, rather than competitors. These initiatives acknowledge and incentivize ongoing interactions with the brand, with increased engagement translating into greater rewards over time.</p> <p>Through a program, businesses can extend points or perks to their clientele, who in turn redeem these rewards for discounts, complimentary items, special incentives, or exclusive privileges. The objective is to foster repeat transactions and cultivate a sense of trust and loyalty between customers and brands.</p>"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%203/#comprehensive-insights-of-programs","title":"Comprehensive Insights of Programs","text":""},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%203/#loc_overrides","title":"loc_overrides","text":"<p>loc_overrides provide targeted rewards or deals that are constrained to specific geographic areas, utilizing location-specific data to customize offerings for customers in those regions</p> <p>LIST OF TABLES: The table for loc_overrides is employed to fetch the corresponding fields mentioned above.</p> <ul> <li> <p>loc_overrides</p> </li> <li> <p>loc_overrides Details data can be retrieved in a few different ways, as listed below.</p> </li> <li> <p>How to retrieve the loc_overrides details?</p> </li> </ul> <pre><code>SELECT location_id,\ntarget_id,\ntarget_type,\noptin_flag\nFROM schema_name.loc_overrides\nWHERE delete_flag &lt;&gt; 'Y' --To get only non-deleted records from loc_overrides\n;\n</code></pre> location_id target_id target_type optin_flag 5d039086eb256687e4ddc5fa 5df8b81a04f3a60172bfbfc6 Rewardwallet true 5d039087eb256687e4ddcb6f 5df8b81a04f3a60172bfbfc6 Rewardwallet false"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%203/#programs","title":"programs","text":"<p>Stores basic information about the program like program_name, Description.</p> <p>We have the ability to customize the program according to the client's specifications. Within the program, we can manage specific functionalities such as loyalty points, offers, rewards, and more as needed.</p> <p>For a program to be functional there are three components: - Rules, Policies, and Flows. These in turn are based on reference data.</p> <p>LIST OF TABLES: The table for programs is employed to fetch the corresponding fields mentioned above.</p> <ul> <li>programs</li> </ul> <p>programs Details data can be retrieved in a few different ways, as listed below.</p> <ul> <li>How to retrieve the programs details based on the program_name?</li> </ul> <pre><code>SELECT program_name,\nprogram_description,\nis_multinational\nFROM schema_name.programs\nWHERE program_name = 'Rewards' -- To filter based on program_name\nAND delete_flag &lt;&gt; 'Y' --To get only non-deleted records from programs\n;\n</code></pre> <p>Sample Data:</p> program_name program_description is_multinational Rewards Rewards false"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%203/#wallet_policies","title":"wallet_policies","text":"<p>wallet_policies are configurations to define the different categories of virtual currencies that are tracked for a member. Without a purse there can be no rewarding of points. There is no limitation to the quantity of purses created in a program. However, per user experience there is only one purse visible; the division of purses only exists in the backend of the loyalty system.</p> <p>LIST OF TABLES: The table for wallet_policies is employed to fetch the corresponding fields mentioned above.</p> <ul> <li>wallet_policies</li> </ul> <p>wallet_policies data can be retrieved from the database in a few different ways, as listed below</p> <ul> <li>How to retrieve the wallet_policies details based on wallet_name?</li> </ul> <pre><code>SELECT wallet_name,\nwallet_description,\neffective_from,\nexpiration_dt,\npt_multiplier,\nwallet_group_name,\nperiod_start_date,\nperiod_end_date\nFROM schema_name.wallet_policies\nWHERE wallet_name = 'level Credits' -- To filter based on wallet_name\nAND delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from wallet_policies\n;\n</code></pre> <p>Sample Data:</p> wallet_name wallet_description effective_from expiration_dt pt_multiplier wallet_group_name period_start_date period_end_date level Credits level Credits 2000-01-01 00:00:00+00 3000-01-01 23:59:59.999+00 10000.000 level Credits 2023-01-01 08:00:00+00 2024-01-01 07:59:59.999+00 <ul> <li>How to retrieve active wallet_policies details?</li> </ul> <pre><code>SELECT wallet_name,\nwallet_description,\neffective_from,\nexpiration_dt,\npt_multiplier,\nwallet_group_name,\nperiod_start_date,\nperiod_end_date\nFROM schema_name.wallet_policies\nWHERE ((wallet_group_name IS NULL AND expiration_dt::DATE\\&gt;=\nSYSDATE::DATE) OR (wallet_group_name IS NOT NULL AND\nperiod_end_date::DATE\\&gt;= SYSDATE::DATE))\nAND delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from wallet_policies\n;\n</code></pre> <p>Sample Data:</p> wallet_name wallet_description effective_from expiration_dt pt_multiplier wallet_group_name period_start_date period_end_date Deferred Debits Deferred Debits 2000-01-01 00:00:00+00 3000-01-01 23:59:59.999+00 10000.000 level Credits 2024 level Credits 2024 2000-01-01 00:00:00+00 3000-01-01 23:59:59.999+00 10000.000 level Credits 2024-01-01 08:00:00+00 2025-01-01 07:59:59.999+00"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%203/#level_policies","title":"level_policies","text":"<p>level_policies are the configurations to define the classification of members based on milestones that have been awarded. They provide guidelines for how a level shall operate. Often these guidelines dictate how many levels are available in the program, how many levels exist within a level, how many points required for movement between levels, etc.</p> <p>LIST OF TABLES: The table for level_policies is employed to fetch the corresponding fields mentioned above.</p> <ul> <li>level_policies</li> </ul> <p>level_policies data can be retrieved from the database in a few different ways, as listed below:</p> <ul> <li>How to retrieve the level_policies details?</li> </ul> <pre><code>SELECT loyalty_program_id,\nlevel_name,\nprimary_flag\nFROM schema_name.level_policies\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from level_policies\n;\n</code></pre> <p>Sample Data:</p> loyalty_program_id level_name primary_flag 626a6d6128034c0263eb83dd Base true"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Division%203/#wallet_levels","title":"wallet_levels","text":"<p>The wallet_levels table is responsible for storing and managing information related to the various levels of membership levels for members.</p> <p>LIST OF TABLES: The table for wallet_levels is employed to fetch the corresponding fields mentioned above.</p> <ul> <li> <p>wallet_levels</p> </li> <li> <p>level_policies</p> </li> <li> <p>How to retrieve the wallet_levels details based on level Name?</p> </li> </ul> <pre><code>SELECT TP.level_name,\nlevel_name,\nis_default,\nlevel_number,\nlevel_threshold\nFROM schema_name.wallet_levels TPL\nINNER JOIN schema_name.level_policies TP ON TPL.level_wallet_id = TP.id\nWHERE TP.level_name = 'Base' -- To filter based on level name\nAND TP.delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from level_policies\n;\n</code></pre> <p>Sample Data:</p> level_name level_name is_default level_number level_threshold Base Pearl false 2 20,000 Base Gold false 3 75,000 <ul> <li>How to retrieve the wallet_levels details based on level Level Name?</li> </ul> <pre><code>SELECT TP.level_name,\nlevel_name,\nis_default,\nlevel_number,\nlevel_threshold\nFROM schema_name.wallet_levels TPL\nINNER JOIN schema_name.level_policies TP ON TPL.level_wallet_id = TP.id\nWHERE TPL.level_name = 'Gold' -- To filter based on level name\nAND TP.delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from level_policies\n;\n</code></pre> <p>Sample Data:</p> level_name level_name is_default level_number level_threshold Base Gold false 3 75,000 <ul> <li>How to retrieve the wallet_levels details based on the level_threshold?</li> </ul> <pre><code>SELECT TP.level_name,\nlevel_name,\nis_default,\nlevel_number,\nlevel_threshold\nFROM schema_name.wallet_levels TPL\nINNER JOIN schema_name.level_policies TP ON TPL.level_wallet_id = TP.id\nWHERE level_threshold BETWEEN '20000' AND '200000' -- To filter based on level threshold\nAND TP.delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from level_policies\n;\n</code></pre> <p>Sample Data:</p> level_name level_name is_default level_number level_threshold Base Pearl false 2 20,000 Base Gold false 3 75,000"}]}